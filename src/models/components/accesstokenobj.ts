/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type AccessTokenObj = {
    success?: boolean | undefined;
    accessToken: string;
};

/** @internal */
export const AccessTokenObj$inboundSchema: z.ZodType<AccessTokenObj, z.ZodTypeDef, unknown> =
    z.object({
        success: z.boolean().default(true),
        accessToken: z.string(),
    });

/** @internal */
export type AccessTokenObj$Outbound = {
    success: boolean;
    accessToken: string;
};

/** @internal */
export const AccessTokenObj$outboundSchema: z.ZodType<
    AccessTokenObj$Outbound,
    z.ZodTypeDef,
    AccessTokenObj
> = z.object({
    success: z.boolean().default(true),
    accessToken: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenObj$ {
    /** @deprecated use `AccessTokenObj$inboundSchema` instead. */
    export const inboundSchema = AccessTokenObj$inboundSchema;
    /** @deprecated use `AccessTokenObj$outboundSchema` instead. */
    export const outboundSchema = AccessTokenObj$outboundSchema;
    /** @deprecated use `AccessTokenObj$Outbound` instead. */
    export type Outbound = AccessTokenObj$Outbound;
}
