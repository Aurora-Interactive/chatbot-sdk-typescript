/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type Two = {
    statusCode: number;
    error: string;
    message: string;
};

export const RateLimitReachedErrorError = {
    YouHaveExceededYourMessageQuotaToSendMoreMessagesPleaseUpgradeYourPlanOrWaitUntilYourSubscriptionRenews:
        "You have exceeded your message quota. To send more messages, please upgrade your plan or wait until your subscription renews.",
} as const;
export type RateLimitReachedErrorError = ClosedEnum<typeof RateLimitReachedErrorError>;

export type FailedRequest = {
    success?: boolean | undefined;
    error: RateLimitReachedErrorError;
};

export type RateLimitReachedError = FailedRequest | Two;

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({
    statusCode: z.number().int(),
    error: z.string(),
    message: z.string(),
});

/** @internal */
export type Two$Outbound = {
    statusCode: number;
    error: string;
    message: string;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z.object({
    statusCode: z.number().int(),
    error: z.string(),
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
    /** @deprecated use `Two$Outbound` instead. */
    export type Outbound = Two$Outbound;
}

/** @internal */
export const RateLimitReachedErrorError$inboundSchema: z.ZodNativeEnum<
    typeof RateLimitReachedErrorError
> = z.nativeEnum(RateLimitReachedErrorError);

/** @internal */
export const RateLimitReachedErrorError$outboundSchema: z.ZodNativeEnum<
    typeof RateLimitReachedErrorError
> = RateLimitReachedErrorError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitReachedErrorError$ {
    /** @deprecated use `RateLimitReachedErrorError$inboundSchema` instead. */
    export const inboundSchema = RateLimitReachedErrorError$inboundSchema;
    /** @deprecated use `RateLimitReachedErrorError$outboundSchema` instead. */
    export const outboundSchema = RateLimitReachedErrorError$outboundSchema;
}

/** @internal */
export const FailedRequest$inboundSchema: z.ZodType<FailedRequest, z.ZodTypeDef, unknown> =
    z.object({
        success: z.boolean().default(false),
        error: RateLimitReachedErrorError$inboundSchema,
    });

/** @internal */
export type FailedRequest$Outbound = {
    success: boolean;
    error: string;
};

/** @internal */
export const FailedRequest$outboundSchema: z.ZodType<
    FailedRequest$Outbound,
    z.ZodTypeDef,
    FailedRequest
> = z.object({
    success: z.boolean().default(false),
    error: RateLimitReachedErrorError$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FailedRequest$ {
    /** @deprecated use `FailedRequest$inboundSchema` instead. */
    export const inboundSchema = FailedRequest$inboundSchema;
    /** @deprecated use `FailedRequest$outboundSchema` instead. */
    export const outboundSchema = FailedRequest$outboundSchema;
    /** @deprecated use `FailedRequest$Outbound` instead. */
    export type Outbound = FailedRequest$Outbound;
}

/** @internal */
export const RateLimitReachedError$inboundSchema: z.ZodType<
    RateLimitReachedError,
    z.ZodTypeDef,
    unknown
> = z.union([z.lazy(() => FailedRequest$inboundSchema), z.lazy(() => Two$inboundSchema)]);

/** @internal */
export type RateLimitReachedError$Outbound = FailedRequest$Outbound | Two$Outbound;

/** @internal */
export const RateLimitReachedError$outboundSchema: z.ZodType<
    RateLimitReachedError$Outbound,
    z.ZodTypeDef,
    RateLimitReachedError
> = z.union([z.lazy(() => FailedRequest$outboundSchema), z.lazy(() => Two$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitReachedError$ {
    /** @deprecated use `RateLimitReachedError$inboundSchema` instead. */
    export const inboundSchema = RateLimitReachedError$inboundSchema;
    /** @deprecated use `RateLimitReachedError$outboundSchema` instead. */
    export const outboundSchema = RateLimitReachedError$outboundSchema;
    /** @deprecated use `RateLimitReachedError$Outbound` instead. */
    export type Outbound = RateLimitReachedError$Outbound;
}
