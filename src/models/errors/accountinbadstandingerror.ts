/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const AccountInBadStandingErrorError = {
    AccountAssociatedWithThisAccessTokenIsNotSubscribedToAPaidPlan:
        "Account associated with this access token is not subscribed to a paid plan",
} as const;
export type AccountInBadStandingErrorError = ClosedEnum<typeof AccountInBadStandingErrorError>;

/**
 * Given user is not allowed to use the API, usually because they don't have an active subscription to our services
 */
export type AccountInBadStandingErrorData = {
    success: boolean;
    error: AccountInBadStandingErrorError;
};

/**
 * Given user is not allowed to use the API, usually because they don't have an active subscription to our services
 */
export class AccountInBadStandingError extends Error {
    success: boolean;
    error: AccountInBadStandingErrorError;

    /** The original data that was passed to this error instance. */
    data$: AccountInBadStandingErrorData;

    constructor(err: AccountInBadStandingErrorData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.name = "AccountInBadStandingError";
    }
}

/** @internal */
export const AccountInBadStandingErrorError$inboundSchema: z.ZodNativeEnum<
    typeof AccountInBadStandingErrorError
> = z.nativeEnum(AccountInBadStandingErrorError);

/** @internal */
export const AccountInBadStandingErrorError$outboundSchema: z.ZodNativeEnum<
    typeof AccountInBadStandingErrorError
> = AccountInBadStandingErrorError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountInBadStandingErrorError$ {
    /** @deprecated use `AccountInBadStandingErrorError$inboundSchema` instead. */
    export const inboundSchema = AccountInBadStandingErrorError$inboundSchema;
    /** @deprecated use `AccountInBadStandingErrorError$outboundSchema` instead. */
    export const outboundSchema = AccountInBadStandingErrorError$outboundSchema;
}

/** @internal */
export const AccountInBadStandingError$inboundSchema: z.ZodType<
    AccountInBadStandingError,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success: z.boolean().default(false),
        error: AccountInBadStandingErrorError$inboundSchema,
    })
    .transform((v) => {
        return new AccountInBadStandingError(v);
    });

/** @internal */
export type AccountInBadStandingError$Outbound = {
    success: boolean;
    error: string;
};

/** @internal */
export const AccountInBadStandingError$outboundSchema: z.ZodType<
    AccountInBadStandingError$Outbound,
    z.ZodTypeDef,
    AccountInBadStandingError
> = z
    .instanceof(AccountInBadStandingError)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            success: z.boolean().default(false),
            error: AccountInBadStandingErrorError$outboundSchema,
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountInBadStandingError$ {
    /** @deprecated use `AccountInBadStandingError$inboundSchema` instead. */
    export const inboundSchema = AccountInBadStandingError$inboundSchema;
    /** @deprecated use `AccountInBadStandingError$outboundSchema` instead. */
    export const outboundSchema = AccountInBadStandingError$outboundSchema;
    /** @deprecated use `AccountInBadStandingError$Outbound` instead. */
    export type Outbound = AccountInBadStandingError$Outbound;
}
