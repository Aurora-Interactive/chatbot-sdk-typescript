/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ErrorT = {
    OneOrMoreAPIParametersAreMalformedPleaseCheckYourRequestAndTryAgain:
        "One or more API parameters are malformed. Please check your request and try again",
} as const;
export type ErrorT = ClosedEnum<typeof ErrorT>;

/**
 * One or more request parameters are malformed or invalid
 */
export type BadRequestErrorData = {
    success: boolean;
    error: ErrorT;
};

/**
 * One or more request parameters are malformed or invalid
 */
export class BadRequestError extends Error {
    success: boolean;
    error: ErrorT;

    /** The original data that was passed to this error instance. */
    data$: BadRequestErrorData;

    constructor(err: BadRequestErrorData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "BadRequestError";
    }
}

/** @internal */
export namespace ErrorT$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ErrorT> = z.nativeEnum(ErrorT);
    export const outboundSchema: z.ZodNativeEnum<typeof ErrorT> = inboundSchema;
}

/** @internal */
export namespace BadRequestError$ {
    export const inboundSchema: z.ZodType<BadRequestError, z.ZodTypeDef, unknown> = z
        .object({
            success: z.boolean().default(false),
            error: ErrorT$.inboundSchema,
        })
        .transform((v) => {
            return new BadRequestError(v);
        });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BadRequestError> = z
        .instanceof(BadRequestError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(false),
                error: ErrorT$.outboundSchema,
            })
        );
}
