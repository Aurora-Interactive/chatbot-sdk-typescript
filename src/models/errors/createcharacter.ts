/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import { BadRequestError, BadRequestError$ } from "./badrequesterror.js";
import * as z from "zod";

export const CreateCharacterResponseBodyError = {
    CharacterWithThisNameAlreadyExists: "Character with this name already exists",
} as const;
export type CreateCharacterResponseBodyError = ClosedEnum<typeof CreateCharacterResponseBodyError>;

export type DuplicateCharacterErrorResponseData = {
    success: boolean;
    error: CreateCharacterResponseBodyError;
};

export class DuplicateCharacterErrorResponse extends Error {
    success: boolean;
    error: CreateCharacterResponseBodyError;

    /** The original data that was passed to this error instance. */
    data$: DuplicateCharacterErrorResponseData;

    constructor(err: DuplicateCharacterErrorResponseData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "DuplicateCharacterErrorResponse";
    }
}

/**
 * Bad request
 */
export type CreateCharacterResponseBody = BadRequestError | DuplicateCharacterErrorResponse;

/** @internal */
export namespace CreateCharacterResponseBodyError$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateCharacterResponseBodyError> =
        z.nativeEnum(CreateCharacterResponseBodyError);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateCharacterResponseBodyError> =
        inboundSchema;
}

/** @internal */
export namespace DuplicateCharacterErrorResponse$ {
    export const inboundSchema: z.ZodType<DuplicateCharacterErrorResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                success: z.boolean().default(true),
                error: CreateCharacterResponseBodyError$.inboundSchema,
            })
            .transform((v) => {
                return new DuplicateCharacterErrorResponse(v);
            });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DuplicateCharacterErrorResponse
    > = z
        .instanceof(DuplicateCharacterErrorResponse)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(true),
                error: CreateCharacterResponseBodyError$.outboundSchema,
            })
        );
}

/** @internal */
export namespace CreateCharacterResponseBody$ {
    export const inboundSchema: z.ZodType<CreateCharacterResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            BadRequestError$.inboundSchema,
            z.lazy(() => DuplicateCharacterErrorResponse$.inboundSchema),
        ]);

    export type Outbound = BadRequestError$.Outbound | DuplicateCharacterErrorResponse$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCharacterResponseBody> =
        z.union([
            BadRequestError$.outboundSchema,
            z.lazy(() => DuplicateCharacterErrorResponse$.outboundSchema),
        ]);
}
