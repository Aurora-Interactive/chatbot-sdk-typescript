/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    BadRequestError,
    BadRequestError$inboundSchema,
    BadRequestError$Outbound,
    BadRequestError$outboundSchema,
} from "./badrequesterror.js";
import * as z from "zod";

export const CreateCharacterResponseBodyError = {
    CharacterWithThisNameAlreadyExists: "Character with this name already exists",
} as const;
export type CreateCharacterResponseBodyError = ClosedEnum<typeof CreateCharacterResponseBodyError>;

export type DuplicateCharacterErrorResponseData = {
    success: boolean;
    error: CreateCharacterResponseBodyError;
};

export class DuplicateCharacterErrorResponse extends Error {
    success: boolean;
    error: CreateCharacterResponseBodyError;

    /** The original data that was passed to this error instance. */
    data$: DuplicateCharacterErrorResponseData;

    constructor(err: DuplicateCharacterErrorResponseData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.name = "DuplicateCharacterErrorResponse";
    }
}

/**
 * Bad request
 */
export type CreateCharacterResponseBody = BadRequestError | DuplicateCharacterErrorResponse;

/** @internal */
export const CreateCharacterResponseBodyError$inboundSchema: z.ZodNativeEnum<
    typeof CreateCharacterResponseBodyError
> = z.nativeEnum(CreateCharacterResponseBodyError);

/** @internal */
export const CreateCharacterResponseBodyError$outboundSchema: z.ZodNativeEnum<
    typeof CreateCharacterResponseBodyError
> = CreateCharacterResponseBodyError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCharacterResponseBodyError$ {
    /** @deprecated use `CreateCharacterResponseBodyError$inboundSchema` instead. */
    export const inboundSchema = CreateCharacterResponseBodyError$inboundSchema;
    /** @deprecated use `CreateCharacterResponseBodyError$outboundSchema` instead. */
    export const outboundSchema = CreateCharacterResponseBodyError$outboundSchema;
}

/** @internal */
export const DuplicateCharacterErrorResponse$inboundSchema: z.ZodType<
    DuplicateCharacterErrorResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success: z.boolean().default(true),
        error: CreateCharacterResponseBodyError$inboundSchema,
    })
    .transform((v) => {
        return new DuplicateCharacterErrorResponse(v);
    });

/** @internal */
export type DuplicateCharacterErrorResponse$Outbound = {
    success: boolean;
    error: string;
};

/** @internal */
export const DuplicateCharacterErrorResponse$outboundSchema: z.ZodType<
    DuplicateCharacterErrorResponse$Outbound,
    z.ZodTypeDef,
    DuplicateCharacterErrorResponse
> = z
    .instanceof(DuplicateCharacterErrorResponse)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            success: z.boolean().default(true),
            error: CreateCharacterResponseBodyError$outboundSchema,
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DuplicateCharacterErrorResponse$ {
    /** @deprecated use `DuplicateCharacterErrorResponse$inboundSchema` instead. */
    export const inboundSchema = DuplicateCharacterErrorResponse$inboundSchema;
    /** @deprecated use `DuplicateCharacterErrorResponse$outboundSchema` instead. */
    export const outboundSchema = DuplicateCharacterErrorResponse$outboundSchema;
    /** @deprecated use `DuplicateCharacterErrorResponse$Outbound` instead. */
    export type Outbound = DuplicateCharacterErrorResponse$Outbound;
}

/** @internal */
export const CreateCharacterResponseBody$inboundSchema: z.ZodType<
    CreateCharacterResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    BadRequestError$inboundSchema,
    z.lazy(() => DuplicateCharacterErrorResponse$inboundSchema),
]);

/** @internal */
export type CreateCharacterResponseBody$Outbound =
    | BadRequestError$Outbound
    | DuplicateCharacterErrorResponse$Outbound;

/** @internal */
export const CreateCharacterResponseBody$outboundSchema: z.ZodType<
    CreateCharacterResponseBody$Outbound,
    z.ZodTypeDef,
    CreateCharacterResponseBody
> = z.union([
    BadRequestError$outboundSchema,
    z.lazy(() => DuplicateCharacterErrorResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCharacterResponseBody$ {
    /** @deprecated use `CreateCharacterResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateCharacterResponseBody$inboundSchema;
    /** @deprecated use `CreateCharacterResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateCharacterResponseBody$outboundSchema;
    /** @deprecated use `CreateCharacterResponseBody$Outbound` instead. */
    export type Outbound = CreateCharacterResponseBody$Outbound;
}
