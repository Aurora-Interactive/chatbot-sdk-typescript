/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    AuthenticationFailedError,
    AuthenticationFailedError$,
} from "./authenticationfailederror.js";
import { BadRequestError, BadRequestError$ } from "./badrequesterror.js";
import { UnauthorizedIdError, UnauthorizedIdError$ } from "./unauthorizediderror.js";
import * as z from "zod";

/**
 * Unauthorized
 */
export type DeleteChatChatsResponseBody = AuthenticationFailedError | UnauthorizedIdError;

export const DeleteChatResponseBodyError = {
    InvalidChatID: "Invalid chat ID",
} as const;
export type DeleteChatResponseBodyError = ClosedEnum<typeof DeleteChatResponseBodyError>;

export type DeleteChatResponseBodyInvalidChatIdErrorData = {
    success: boolean;
    error: DeleteChatResponseBodyError;
};

export class DeleteChatResponseBodyInvalidChatIdError extends Error {
    success: boolean;
    error: DeleteChatResponseBodyError;

    /** The original data that was passed to this error instance. */
    data$: DeleteChatResponseBodyInvalidChatIdErrorData;

    constructor(err: DeleteChatResponseBodyInvalidChatIdErrorData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "DeleteChatResponseBodyInvalidChatIdError";
    }
}

/**
 * Bad request
 */
export type DeleteChatResponseBody = BadRequestError | DeleteChatResponseBodyInvalidChatIdError;

/** @internal */
export namespace DeleteChatChatsResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteChatChatsResponseBody, z.ZodTypeDef, unknown> =
        z.union([AuthenticationFailedError$.inboundSchema, UnauthorizedIdError$.inboundSchema]);

    export type Outbound = AuthenticationFailedError$.Outbound | UnauthorizedIdError$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteChatChatsResponseBody> =
        z.union([AuthenticationFailedError$.outboundSchema, UnauthorizedIdError$.outboundSchema]);
}

/** @internal */
export namespace DeleteChatResponseBodyError$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeleteChatResponseBodyError> = z.nativeEnum(
        DeleteChatResponseBodyError
    );
    export const outboundSchema: z.ZodNativeEnum<typeof DeleteChatResponseBodyError> =
        inboundSchema;
}

/** @internal */
export namespace DeleteChatResponseBodyInvalidChatIdError$ {
    export const inboundSchema: z.ZodType<
        DeleteChatResponseBodyInvalidChatIdError,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            success: z.boolean().default(false),
            error: DeleteChatResponseBodyError$.inboundSchema,
        })
        .transform((v) => {
            return new DeleteChatResponseBodyInvalidChatIdError(v);
        });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteChatResponseBodyInvalidChatIdError
    > = z
        .instanceof(DeleteChatResponseBodyInvalidChatIdError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(false),
                error: DeleteChatResponseBodyError$.outboundSchema,
            })
        );
}

/** @internal */
export namespace DeleteChatResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteChatResponseBody, z.ZodTypeDef, unknown> = z.union([
        BadRequestError$.inboundSchema,
        z.lazy(() => DeleteChatResponseBodyInvalidChatIdError$.inboundSchema),
    ]);

    export type Outbound =
        | BadRequestError$.Outbound
        | DeleteChatResponseBodyInvalidChatIdError$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteChatResponseBody> =
        z.union([
            BadRequestError$.outboundSchema,
            z.lazy(() => DeleteChatResponseBodyInvalidChatIdError$.outboundSchema),
        ]);
}
