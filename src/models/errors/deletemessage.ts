/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    AuthenticationFailedError,
    AuthenticationFailedError$,
} from "./authenticationfailederror.js";
import { BadRequestError, BadRequestError$ } from "./badrequesterror.js";
import { UnauthorizedIdError, UnauthorizedIdError$ } from "./unauthorizediderror.js";
import * as z from "zod";

/**
 * Unauthorized
 */
export type DeleteMessageMessagesResponseBody = AuthenticationFailedError | UnauthorizedIdError;

export const DeleteMessageResponseBodyError = {
    InvalidMessageID: "Invalid message ID",
} as const;
export type DeleteMessageResponseBodyError = ClosedEnum<typeof DeleteMessageResponseBodyError>;

export type InvalidMessageIdErrorData = {
    success: boolean;
    error: DeleteMessageResponseBodyError;
};

export class InvalidMessageIdError extends Error {
    success: boolean;
    error: DeleteMessageResponseBodyError;

    /** The original data that was passed to this error instance. */
    data$: InvalidMessageIdErrorData;

    constructor(err: InvalidMessageIdErrorData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "InvalidMessageIdError";
    }
}

/**
 * Bad request
 */
export type DeleteMessageResponseBody = BadRequestError | InvalidMessageIdError;

/** @internal */
export namespace DeleteMessageMessagesResponseBody$ {
    export const inboundSchema: z.ZodType<
        DeleteMessageMessagesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([AuthenticationFailedError$.inboundSchema, UnauthorizedIdError$.inboundSchema]);

    export type Outbound = AuthenticationFailedError$.Outbound | UnauthorizedIdError$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteMessageMessagesResponseBody
    > = z.union([AuthenticationFailedError$.outboundSchema, UnauthorizedIdError$.outboundSchema]);
}

/** @internal */
export namespace DeleteMessageResponseBodyError$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeleteMessageResponseBodyError> =
        z.nativeEnum(DeleteMessageResponseBodyError);
    export const outboundSchema: z.ZodNativeEnum<typeof DeleteMessageResponseBodyError> =
        inboundSchema;
}

/** @internal */
export namespace InvalidMessageIdError$ {
    export const inboundSchema: z.ZodType<InvalidMessageIdError, z.ZodTypeDef, unknown> = z
        .object({
            success: z.boolean().default(false),
            error: DeleteMessageResponseBodyError$.inboundSchema,
        })
        .transform((v) => {
            return new InvalidMessageIdError(v);
        });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvalidMessageIdError> = z
        .instanceof(InvalidMessageIdError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(false),
                error: DeleteMessageResponseBodyError$.outboundSchema,
            })
        );
}

/** @internal */
export namespace DeleteMessageResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteMessageResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            BadRequestError$.inboundSchema,
            z.lazy(() => InvalidMessageIdError$.inboundSchema),
        ]);

    export type Outbound = BadRequestError$.Outbound | InvalidMessageIdError$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteMessageResponseBody> =
        z.union([
            BadRequestError$.outboundSchema,
            z.lazy(() => InvalidMessageIdError$.outboundSchema),
        ]);
}
