/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    AuthenticationFailedError,
    AuthenticationFailedError$,
} from "./authenticationfailederror.js";
import { BadRequestError, BadRequestError$ } from "./badrequesterror.js";
import { UnauthorizedIdError, UnauthorizedIdError$ } from "./unauthorizediderror.js";
import * as z from "zod";

/**
 * Unauthorized
 */
export type GetMessageHistoryMessagesResponseBody = AuthenticationFailedError | UnauthorizedIdError;

export const ResponseBodyError = {
    InvalidChatID: "Invalid chat ID",
} as const;
export type ResponseBodyError = ClosedEnum<typeof ResponseBodyError>;

export type InvalidChatIdErrorData = {
    success: boolean;
    error: ResponseBodyError;
};

export class InvalidChatIdError extends Error {
    success: boolean;
    error: ResponseBodyError;

    /** The original data that was passed to this error instance. */
    data$: InvalidChatIdErrorData;

    constructor(err: InvalidChatIdErrorData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "InvalidChatIdError";
    }
}

/**
 * Bad request
 */
export type GetMessageHistoryResponseBody = BadRequestError | InvalidChatIdError;

/** @internal */
export namespace GetMessageHistoryMessagesResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetMessageHistoryMessagesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([AuthenticationFailedError$.inboundSchema, UnauthorizedIdError$.inboundSchema]);

    export type Outbound = AuthenticationFailedError$.Outbound | UnauthorizedIdError$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetMessageHistoryMessagesResponseBody
    > = z.union([AuthenticationFailedError$.outboundSchema, UnauthorizedIdError$.outboundSchema]);
}

/** @internal */
export namespace ResponseBodyError$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ResponseBodyError> =
        z.nativeEnum(ResponseBodyError);
    export const outboundSchema: z.ZodNativeEnum<typeof ResponseBodyError> = inboundSchema;
}

/** @internal */
export namespace InvalidChatIdError$ {
    export const inboundSchema: z.ZodType<InvalidChatIdError, z.ZodTypeDef, unknown> = z
        .object({
            success: z.boolean().default(false),
            error: ResponseBodyError$.inboundSchema,
        })
        .transform((v) => {
            return new InvalidChatIdError(v);
        });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvalidChatIdError> = z
        .instanceof(InvalidChatIdError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(false),
                error: ResponseBodyError$.outboundSchema,
            })
        );
}

/** @internal */
export namespace GetMessageHistoryResponseBody$ {
    export const inboundSchema: z.ZodType<GetMessageHistoryResponseBody, z.ZodTypeDef, unknown> =
        z.union([BadRequestError$.inboundSchema, z.lazy(() => InvalidChatIdError$.inboundSchema)]);

    export type Outbound = BadRequestError$.Outbound | InvalidChatIdError$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessageHistoryResponseBody> =
        z.union([
            BadRequestError$.outboundSchema,
            z.lazy(() => InvalidChatIdError$.outboundSchema),
        ]);
}
