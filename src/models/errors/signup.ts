/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const SignupError = {
    UsernameOrEmailAlreadyInUse: "Username or email already in use",
} as const;
export type SignupError = ClosedEnum<typeof SignupError>;

/**
 * Username or email already in use
 */
export type SignupDuplicateSignupErrorData = {
    success: boolean;
    error: SignupError;
};

/**
 * Username or email already in use
 */
export class SignupDuplicateSignupError extends Error {
    success: boolean;
    error: SignupError;

    /** The original data that was passed to this error instance. */
    data$: SignupDuplicateSignupErrorData;

    constructor(err: SignupDuplicateSignupErrorData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.name = "SignupDuplicateSignupError";
    }
}

/** @internal */
export const SignupError$inboundSchema: z.ZodNativeEnum<typeof SignupError> =
    z.nativeEnum(SignupError);

/** @internal */
export const SignupError$outboundSchema: z.ZodNativeEnum<typeof SignupError> =
    SignupError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupError$ {
    /** @deprecated use `SignupError$inboundSchema` instead. */
    export const inboundSchema = SignupError$inboundSchema;
    /** @deprecated use `SignupError$outboundSchema` instead. */
    export const outboundSchema = SignupError$outboundSchema;
}

/** @internal */
export const SignupDuplicateSignupError$inboundSchema: z.ZodType<
    SignupDuplicateSignupError,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success: z.boolean().default(false),
        error: SignupError$inboundSchema,
    })
    .transform((v) => {
        return new SignupDuplicateSignupError(v);
    });

/** @internal */
export type SignupDuplicateSignupError$Outbound = {
    success: boolean;
    error: string;
};

/** @internal */
export const SignupDuplicateSignupError$outboundSchema: z.ZodType<
    SignupDuplicateSignupError$Outbound,
    z.ZodTypeDef,
    SignupDuplicateSignupError
> = z
    .instanceof(SignupDuplicateSignupError)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            success: z.boolean().default(false),
            error: SignupError$outboundSchema,
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupDuplicateSignupError$ {
    /** @deprecated use `SignupDuplicateSignupError$inboundSchema` instead. */
    export const inboundSchema = SignupDuplicateSignupError$inboundSchema;
    /** @deprecated use `SignupDuplicateSignupError$outboundSchema` instead. */
    export const outboundSchema = SignupDuplicateSignupError$outboundSchema;
    /** @deprecated use `SignupDuplicateSignupError$Outbound` instead. */
    export type Outbound = SignupDuplicateSignupError$Outbound;
}
