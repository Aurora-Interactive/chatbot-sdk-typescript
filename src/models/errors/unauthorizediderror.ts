/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const UnauthorizedIdErrorError = {
    ChatOrMessageDoesNotBelongToThisUser: "Chat or message does not belong to this user",
} as const;
export type UnauthorizedIdErrorError = ClosedEnum<typeof UnauthorizedIdErrorError>;

/**
 * Given resource ID does not belong to the given user
 */
export type UnauthorizedIdErrorData = {
    success: boolean;
    error: UnauthorizedIdErrorError;
};

/**
 * Given resource ID does not belong to the given user
 */
export class UnauthorizedIdError extends Error {
    success: boolean;
    error: UnauthorizedIdErrorError;

    /** The original data that was passed to this error instance. */
    data$: UnauthorizedIdErrorData;

    constructor(err: UnauthorizedIdErrorData) {
        super("");
        this.data$ = err;

        this.success = err.success;
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "UnauthorizedIdError";
    }
}

/** @internal */
export namespace UnauthorizedIdErrorError$ {
    export const inboundSchema: z.ZodNativeEnum<typeof UnauthorizedIdErrorError> =
        z.nativeEnum(UnauthorizedIdErrorError);
    export const outboundSchema: z.ZodNativeEnum<typeof UnauthorizedIdErrorError> = inboundSchema;
}

/** @internal */
export namespace UnauthorizedIdError$ {
    export const inboundSchema: z.ZodType<UnauthorizedIdError, z.ZodTypeDef, unknown> = z
        .object({
            success: z.boolean().default(false),
            error: UnauthorizedIdErrorError$.inboundSchema,
        })
        .transform((v) => {
            return new UnauthorizedIdError(v);
        });

    export type Outbound = {
        success: boolean;
        error: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnauthorizedIdError> = z
        .instanceof(UnauthorizedIdError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                success: z.boolean().default(false),
                error: UnauthorizedIdErrorError$.outboundSchema,
            })
        );
}
