/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type CharactersCreateGlobals = {
    accessToken?: string | undefined;
};

export type SpecialMessages = {
    startsWith: string;
    endsWith: Array<string>;
    prompt: string;
};

export type CharactersCreateRequestBody = {
    name: string;
    description: string;
    aiPrompt: string;
    initialResponse: string;
    /**
     * base64-encoded AVIF image
     */
    banner: string;
    /**
     * base64-encoded AVIF image
     */
    icon: string;
    specialMessages: Array<SpecialMessages>;
};

/**
 * Character was created successfully
 */
export type CharactersCreateSuccessfulRequest = {
    success?: boolean | undefined;
    characterId: number;
};

export type CharactersCreateResponse =
    | CharactersCreateSuccessfulRequest
    | components.DefaultBadRequest
    | components.DefaultUnauthorizedResponse
    | components.DefaultBadStandingResponse;

/** @internal */
export const CharactersCreateGlobals$inboundSchema: z.ZodType<
    CharactersCreateGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    accessToken: z.string().optional(),
});

/** @internal */
export type CharactersCreateGlobals$Outbound = {
    accessToken?: string | undefined;
};

/** @internal */
export const CharactersCreateGlobals$outboundSchema: z.ZodType<
    CharactersCreateGlobals$Outbound,
    z.ZodTypeDef,
    CharactersCreateGlobals
> = z.object({
    accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CharactersCreateGlobals$ {
    /** @deprecated use `CharactersCreateGlobals$inboundSchema` instead. */
    export const inboundSchema = CharactersCreateGlobals$inboundSchema;
    /** @deprecated use `CharactersCreateGlobals$outboundSchema` instead. */
    export const outboundSchema = CharactersCreateGlobals$outboundSchema;
    /** @deprecated use `CharactersCreateGlobals$Outbound` instead. */
    export type Outbound = CharactersCreateGlobals$Outbound;
}

/** @internal */
export const SpecialMessages$inboundSchema: z.ZodType<SpecialMessages, z.ZodTypeDef, unknown> =
    z.object({
        startsWith: z.string(),
        endsWith: z.array(z.string()),
        prompt: z.string(),
    });

/** @internal */
export type SpecialMessages$Outbound = {
    startsWith: string;
    endsWith: Array<string>;
    prompt: string;
};

/** @internal */
export const SpecialMessages$outboundSchema: z.ZodType<
    SpecialMessages$Outbound,
    z.ZodTypeDef,
    SpecialMessages
> = z.object({
    startsWith: z.string(),
    endsWith: z.array(z.string()),
    prompt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SpecialMessages$ {
    /** @deprecated use `SpecialMessages$inboundSchema` instead. */
    export const inboundSchema = SpecialMessages$inboundSchema;
    /** @deprecated use `SpecialMessages$outboundSchema` instead. */
    export const outboundSchema = SpecialMessages$outboundSchema;
    /** @deprecated use `SpecialMessages$Outbound` instead. */
    export type Outbound = SpecialMessages$Outbound;
}

/** @internal */
export const CharactersCreateRequestBody$inboundSchema: z.ZodType<
    CharactersCreateRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    description: z.string(),
    aiPrompt: z.string(),
    initialResponse: z.string(),
    banner: z.string(),
    icon: z.string(),
    specialMessages: z.array(z.lazy(() => SpecialMessages$inboundSchema)),
});

/** @internal */
export type CharactersCreateRequestBody$Outbound = {
    name: string;
    description: string;
    aiPrompt: string;
    initialResponse: string;
    banner: string;
    icon: string;
    specialMessages: Array<SpecialMessages$Outbound>;
};

/** @internal */
export const CharactersCreateRequestBody$outboundSchema: z.ZodType<
    CharactersCreateRequestBody$Outbound,
    z.ZodTypeDef,
    CharactersCreateRequestBody
> = z.object({
    name: z.string(),
    description: z.string(),
    aiPrompt: z.string(),
    initialResponse: z.string(),
    banner: z.string(),
    icon: z.string(),
    specialMessages: z.array(z.lazy(() => SpecialMessages$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CharactersCreateRequestBody$ {
    /** @deprecated use `CharactersCreateRequestBody$inboundSchema` instead. */
    export const inboundSchema = CharactersCreateRequestBody$inboundSchema;
    /** @deprecated use `CharactersCreateRequestBody$outboundSchema` instead. */
    export const outboundSchema = CharactersCreateRequestBody$outboundSchema;
    /** @deprecated use `CharactersCreateRequestBody$Outbound` instead. */
    export type Outbound = CharactersCreateRequestBody$Outbound;
}

/** @internal */
export const CharactersCreateSuccessfulRequest$inboundSchema: z.ZodType<
    CharactersCreateSuccessfulRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    success: z.boolean().default(true),
    characterId: z.number().int(),
});

/** @internal */
export type CharactersCreateSuccessfulRequest$Outbound = {
    success: boolean;
    characterId: number;
};

/** @internal */
export const CharactersCreateSuccessfulRequest$outboundSchema: z.ZodType<
    CharactersCreateSuccessfulRequest$Outbound,
    z.ZodTypeDef,
    CharactersCreateSuccessfulRequest
> = z.object({
    success: z.boolean().default(true),
    characterId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CharactersCreateSuccessfulRequest$ {
    /** @deprecated use `CharactersCreateSuccessfulRequest$inboundSchema` instead. */
    export const inboundSchema = CharactersCreateSuccessfulRequest$inboundSchema;
    /** @deprecated use `CharactersCreateSuccessfulRequest$outboundSchema` instead. */
    export const outboundSchema = CharactersCreateSuccessfulRequest$outboundSchema;
    /** @deprecated use `CharactersCreateSuccessfulRequest$Outbound` instead. */
    export type Outbound = CharactersCreateSuccessfulRequest$Outbound;
}

/** @internal */
export const CharactersCreateResponse$inboundSchema: z.ZodType<
    CharactersCreateResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CharactersCreateSuccessfulRequest$inboundSchema),
    components.DefaultBadRequest$inboundSchema,
    components.DefaultUnauthorizedResponse$inboundSchema,
    components.DefaultBadStandingResponse$inboundSchema,
]);

/** @internal */
export type CharactersCreateResponse$Outbound =
    | CharactersCreateSuccessfulRequest$Outbound
    | components.DefaultBadRequest$Outbound
    | components.DefaultUnauthorizedResponse$Outbound
    | components.DefaultBadStandingResponse$Outbound;

/** @internal */
export const CharactersCreateResponse$outboundSchema: z.ZodType<
    CharactersCreateResponse$Outbound,
    z.ZodTypeDef,
    CharactersCreateResponse
> = z.union([
    z.lazy(() => CharactersCreateSuccessfulRequest$outboundSchema),
    components.DefaultBadRequest$outboundSchema,
    components.DefaultUnauthorizedResponse$outboundSchema,
    components.DefaultBadStandingResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CharactersCreateResponse$ {
    /** @deprecated use `CharactersCreateResponse$inboundSchema` instead. */
    export const inboundSchema = CharactersCreateResponse$inboundSchema;
    /** @deprecated use `CharactersCreateResponse$outboundSchema` instead. */
    export const outboundSchema = CharactersCreateResponse$outboundSchema;
    /** @deprecated use `CharactersCreateResponse$Outbound` instead. */
    export type Outbound = CharactersCreateResponse$Outbound;
}
