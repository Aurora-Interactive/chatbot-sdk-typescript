/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetCharacterImageDataGlobals = {
    accessToken?: string | undefined;
};

export type GetCharacterImageDataRequest = {
    characterId: number;
};

/**
 * Banner and icon images assigned to the character
 */
export type GetCharacterImageDataSuccessfulRequest = {
    /**
     * base64-encoded AVIF image data
     */
    iconImage: string;
    /**
     * base64-encoded AVIF image data
     */
    bannerImage: string;
    success?: boolean | undefined;
};

/** @internal */
export namespace GetCharacterImageDataGlobals$ {
    export const inboundSchema: z.ZodType<GetCharacterImageDataGlobals, z.ZodTypeDef, unknown> =
        z.object({
            accessToken: z.string().optional(),
        });

    export type Outbound = {
        accessToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCharacterImageDataGlobals> =
        z.object({
            accessToken: z.string().optional(),
        });
}

/** @internal */
export namespace GetCharacterImageDataRequest$ {
    export const inboundSchema: z.ZodType<GetCharacterImageDataRequest, z.ZodTypeDef, unknown> =
        z.object({
            characterId: z.number().int(),
        });

    export type Outbound = {
        characterId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCharacterImageDataRequest> =
        z.object({
            characterId: z.number().int(),
        });
}

/** @internal */
export namespace GetCharacterImageDataSuccessfulRequest$ {
    export const inboundSchema: z.ZodType<
        GetCharacterImageDataSuccessfulRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        iconImage: z.string(),
        bannerImage: z.string(),
        success: z.boolean().default(true),
    });

    export type Outbound = {
        iconImage: string;
        bannerImage: string;
        success: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCharacterImageDataSuccessfulRequest
    > = z.object({
        iconImage: z.string(),
        bannerImage: z.string(),
        success: z.boolean().default(true),
    });
}
