/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetCharactersGlobals = {
    accessToken?: string | undefined;
};

export type GetCharactersRequest = {};

export type CharacterOverviewResponse = {
    name: string;
    description: string;
    isOfficial: boolean;
    id: number;
};

/**
 * A JSON array of character metadata for each character
 */
export type GetCharactersSuccessfulRequest = {
    success?: boolean | undefined;
    characters: Array<CharacterOverviewResponse>;
};

/** @internal */
export namespace GetCharactersGlobals$ {
    export const inboundSchema: z.ZodType<GetCharactersGlobals, z.ZodTypeDef, unknown> = z.object({
        accessToken: z.string().optional(),
    });

    export type Outbound = {
        accessToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCharactersGlobals> = z.object(
        {
            accessToken: z.string().optional(),
        }
    );
}

/** @internal */
export namespace GetCharactersRequest$ {
    export const inboundSchema: z.ZodType<GetCharactersRequest, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCharactersRequest> = z.object(
        {}
    );
}

/** @internal */
export namespace CharacterOverviewResponse$ {
    export const inboundSchema: z.ZodType<CharacterOverviewResponse, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
            description: z.string(),
            isOfficial: z.boolean(),
            id: z.number().int(),
        });

    export type Outbound = {
        name: string;
        description: string;
        isOfficial: boolean;
        id: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CharacterOverviewResponse> =
        z.object({
            name: z.string(),
            description: z.string(),
            isOfficial: z.boolean(),
            id: z.number().int(),
        });
}

/** @internal */
export namespace GetCharactersSuccessfulRequest$ {
    export const inboundSchema: z.ZodType<GetCharactersSuccessfulRequest, z.ZodTypeDef, unknown> =
        z.object({
            success: z.boolean().default(true),
            characters: z.array(z.lazy(() => CharacterOverviewResponse$.inboundSchema)),
        });

    export type Outbound = {
        success: boolean;
        characters: Array<CharacterOverviewResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCharactersSuccessfulRequest> =
        z.object({
            success: z.boolean().default(true),
            characters: z.array(z.lazy(() => CharacterOverviewResponse$.outboundSchema)),
        });
}
