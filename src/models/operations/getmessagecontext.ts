/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type GetMessageContextGlobals = {
    accessToken?: string | undefined;
};

export type GetMessageContextRequest = {
    chatId: number;
};

/**
 * JSON array of chat messages
 */
export type GetMessageContextSuccessfulRequest = {
    success?: boolean | undefined;
    chatContext: Array<components.Message>;
};

/** @internal */
export namespace GetMessageContextGlobals$ {
    export const inboundSchema: z.ZodType<GetMessageContextGlobals, z.ZodTypeDef, unknown> =
        z.object({
            accessToken: z.string().optional(),
        });

    export type Outbound = {
        accessToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessageContextGlobals> =
        z.object({
            accessToken: z.string().optional(),
        });
}

/** @internal */
export namespace GetMessageContextRequest$ {
    export const inboundSchema: z.ZodType<GetMessageContextRequest, z.ZodTypeDef, unknown> =
        z.object({
            chatId: z.number().int(),
        });

    export type Outbound = {
        chatId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessageContextRequest> =
        z.object({
            chatId: z.number().int(),
        });
}

/** @internal */
export namespace GetMessageContextSuccessfulRequest$ {
    export const inboundSchema: z.ZodType<
        GetMessageContextSuccessfulRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        success: z.boolean().default(true),
        chatContext: z.array(components.Message$.inboundSchema),
    });

    export type Outbound = {
        success: boolean;
        chatContext: Array<components.Message$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetMessageContextSuccessfulRequest
    > = z.object({
        success: z.boolean().default(true),
        chatContext: z.array(components.Message$.outboundSchema),
    });
}
