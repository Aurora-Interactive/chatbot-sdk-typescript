/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type SendMessageGlobals = {
    accessToken?: string | undefined;
};

export type SendMessageChatIDResponse = {
    chatId: number;
    message: string;
    /**
     * Messages to be used as AI context during response generation
     */
    messageContext?: Array<components.Message> | undefined;
};

/** @internal */
export namespace SendMessageGlobals$ {
    export const inboundSchema: z.ZodType<SendMessageGlobals, z.ZodTypeDef, unknown> = z.object({
        accessToken: z.string().optional(),
    });

    export type Outbound = {
        accessToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendMessageGlobals> = z.object({
        accessToken: z.string().optional(),
    });
}

/** @internal */
export namespace SendMessageChatIDResponse$ {
    export const inboundSchema: z.ZodType<SendMessageChatIDResponse, z.ZodTypeDef, unknown> =
        z.object({
            chatId: z.number().int(),
            message: z.string(),
            messageContext: z.array(components.Message$.inboundSchema).optional(),
        });

    export type Outbound = {
        chatId: number;
        message: string;
        messageContext?: Array<components.Message$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendMessageChatIDResponse> =
        z.object({
            chatId: z.number().int(),
            message: z.string(),
            messageContext: z.array(components.Message$.outboundSchema).optional(),
        });
}
