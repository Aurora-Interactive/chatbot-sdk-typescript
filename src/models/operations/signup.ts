/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type SignupRequestBody = {
    username: string;
    email: string;
    password: string;
};

export const ErrorT = {
    UsernameOrEmailAlreadyInUse: "Username or email already in use",
} as const;
export type ErrorT = ClosedEnum<typeof ErrorT>;

/**
 * Username or email already in use
 */
export type SignupDuplicateSignupError = {
    success?: boolean | undefined;
    error: ErrorT;
};

export type SignupResponse =
    | components.AccessTokenObj
    | components.BadRequestError
    | SignupDuplicateSignupError;

/** @internal */
export const SignupRequestBody$inboundSchema: z.ZodType<SignupRequestBody, z.ZodTypeDef, unknown> =
    z.object({
        username: z.string(),
        email: z.string(),
        password: z.string(),
    });

/** @internal */
export type SignupRequestBody$Outbound = {
    username: string;
    email: string;
    password: string;
};

/** @internal */
export const SignupRequestBody$outboundSchema: z.ZodType<
    SignupRequestBody$Outbound,
    z.ZodTypeDef,
    SignupRequestBody
> = z.object({
    username: z.string(),
    email: z.string(),
    password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupRequestBody$ {
    /** @deprecated use `SignupRequestBody$inboundSchema` instead. */
    export const inboundSchema = SignupRequestBody$inboundSchema;
    /** @deprecated use `SignupRequestBody$outboundSchema` instead. */
    export const outboundSchema = SignupRequestBody$outboundSchema;
    /** @deprecated use `SignupRequestBody$Outbound` instead. */
    export type Outbound = SignupRequestBody$Outbound;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodNativeEnum<typeof ErrorT> = z.nativeEnum(ErrorT);

/** @internal */
export const ErrorT$outboundSchema: z.ZodNativeEnum<typeof ErrorT> = ErrorT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    export const inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    export const outboundSchema = ErrorT$outboundSchema;
}

/** @internal */
export const SignupDuplicateSignupError$inboundSchema: z.ZodType<
    SignupDuplicateSignupError,
    z.ZodTypeDef,
    unknown
> = z.object({
    success: z.boolean().default(false),
    error: ErrorT$inboundSchema,
});

/** @internal */
export type SignupDuplicateSignupError$Outbound = {
    success: boolean;
    error: string;
};

/** @internal */
export const SignupDuplicateSignupError$outboundSchema: z.ZodType<
    SignupDuplicateSignupError$Outbound,
    z.ZodTypeDef,
    SignupDuplicateSignupError
> = z.object({
    success: z.boolean().default(false),
    error: ErrorT$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupDuplicateSignupError$ {
    /** @deprecated use `SignupDuplicateSignupError$inboundSchema` instead. */
    export const inboundSchema = SignupDuplicateSignupError$inboundSchema;
    /** @deprecated use `SignupDuplicateSignupError$outboundSchema` instead. */
    export const outboundSchema = SignupDuplicateSignupError$outboundSchema;
    /** @deprecated use `SignupDuplicateSignupError$Outbound` instead. */
    export type Outbound = SignupDuplicateSignupError$Outbound;
}

/** @internal */
export const SignupResponse$inboundSchema: z.ZodType<SignupResponse, z.ZodTypeDef, unknown> =
    z.union([
        components.AccessTokenObj$inboundSchema,
        components.BadRequestError$inboundSchema,
        z.lazy(() => SignupDuplicateSignupError$inboundSchema),
    ]);

/** @internal */
export type SignupResponse$Outbound =
    | components.AccessTokenObj$Outbound
    | components.BadRequestError$Outbound
    | SignupDuplicateSignupError$Outbound;

/** @internal */
export const SignupResponse$outboundSchema: z.ZodType<
    SignupResponse$Outbound,
    z.ZodTypeDef,
    SignupResponse
> = z.union([
    components.AccessTokenObj$outboundSchema,
    components.BadRequestError$outboundSchema,
    z.lazy(() => SignupDuplicateSignupError$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupResponse$ {
    /** @deprecated use `SignupResponse$inboundSchema` instead. */
    export const inboundSchema = SignupResponse$inboundSchema;
    /** @deprecated use `SignupResponse$outboundSchema` instead. */
    export const outboundSchema = SignupResponse$outboundSchema;
    /** @deprecated use `SignupResponse$Outbound` instead. */
    export type Outbound = SignupResponse$Outbound;
}
