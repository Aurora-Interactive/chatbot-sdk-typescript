/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { unwrap as unwrap$ } from "../types/fp.js";

export class Characters extends ClientSDK {
    /**
     * Character metadata
     *
     * @remarks
     * Get data for available characters in the system. Paginated. Up to 100 characters per request
     */
    async list(
        numCharacters: number,
        from?: number | undefined,
        options?: RequestOptions
    ): Promise<operations.CharactersListResponse> {
        const input$: operations.CharactersListRequest = {
            numCharacters: numCharacters,
            from: from,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.CharactersListRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/api/v7/characters")();

        const query$ = encodeFormQuery$({
            from: payload$.from,
            numCharacters: payload$.numCharacters,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "characters.list", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.CharactersListResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.CharactersListResponse$inboundSchema),
            m$.json(400, operations.CharactersListResponse$inboundSchema),
            m$.json(401, operations.CharactersListResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Get information about a character
     */
    async get(
        characterId: number,
        options?: RequestOptions
    ): Promise<operations.CharactersGetResponse> {
        const input$: operations.CharactersGetRequest = {
            characterId: characterId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.CharactersGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/api/v7/character")();

        const query$ = encodeFormQuery$({
            characterId: payload$.characterId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "characters.get", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.CharactersGetResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.CharactersGetResponse$inboundSchema),
            m$.json(400, operations.CharactersGetResponse$inboundSchema),
            m$.json(401, operations.CharactersGetResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Create character
     *
     * @remarks
     * Upload character data to our system
     */
    async create(
        request?: operations.CharactersCreateRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.CharactersCreateResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.CharactersCreateRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/character")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = {
            operationID: "characters.create",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.CharactersCreateResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.CharactersCreateResponse$inboundSchema),
            m$.json(400, operations.CharactersCreateResponse$inboundSchema),
            m$.json(401, operations.CharactersCreateResponse$inboundSchema),
            m$.json(402, operations.CharactersCreateResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }
}
