/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { charactersCreate } from "../funcs/charactersCreate.js";
import { charactersGet } from "../funcs/charactersGet.js";
import { charactersList } from "../funcs/charactersList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Characters extends ClientSDK {
    /**
     * Character metadata
     *
     * @remarks
     * Get data for available characters in the system. Paginated. Up to 100 characters per request
     */
    async list(
        numCharacters: number,
        from?: number | undefined,
        options?: RequestOptions
    ): Promise<operations.CharactersListResponse> {
        return unwrapAsync(charactersList(this, numCharacters, from, options));
    }

    /**
     * Get information about a character
     */
    async get(
        characterId: number,
        options?: RequestOptions
    ): Promise<operations.CharactersGetResponse> {
        return unwrapAsync(charactersGet(this, characterId, options));
    }

    /**
     * Create character
     *
     * @remarks
     * Upload character data to our system
     */
    async create(
        request?: operations.CharactersCreateRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.CharactersCreateResponse> {
        return unwrapAsync(charactersCreate(this, request, options));
    }
}
