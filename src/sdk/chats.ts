/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";

export class Chats extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get all chats assigned to a user
     *
     * @remarks
     * Get chat IDs assigned to a user ID
     */
    async list(options?: RequestOptions): Promise<operations.ChatsListResponse> {
        const input$: operations.ChatsListRequest = {};
        void input$; // request input is unused

        const path$ = this.templateURLComponent("/api/v6/chats")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "chats.list", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });

        const [result$] = await this.matcher<operations.ChatsListResponse>()
            .json(200, operations.ChatsListResponse$inboundSchema)
            .json(400, operations.ChatsListResponse$inboundSchema)
            .json(401, operations.ChatsListResponse$inboundSchema)
            .fail("5XX")
            .match(response);

        return result$;
    }

    /**
     * Get the latest message from the given chat
     */
    async preview(
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsPreviewResponse> {
        const input$: operations.ChatsPreviewRequest = {
            chatId: chatId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ChatsPreviewRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v6/chat/preview")();

        const query$ = encodeFormQuery$({
            chatId: payload$.chatId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "chats.preview", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });

        const [result$] = await this.matcher<operations.ChatsPreviewResponse>()
            .json(200, operations.ChatsPreviewResponse$inboundSchema)
            .json(400, operations.ChatsPreviewResponse$inboundSchema)
            .json(401, operations.ChatsPreviewResponse$inboundSchema)
            .json(402, operations.ChatsPreviewResponse$inboundSchema)
            .fail("5XX")
            .match(response);

        return result$;
    }

    /**
     * Initialize chat with AI character
     *
     * @remarks
     * Initialize a chat with a given AI character, including storing the character's initial response as a message in our system.
     */
    async initialize(
        characterId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsInitializeResponse> {
        const input$: components.CharacterId | undefined = {
            characterId: characterId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CharacterId$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v6/chat")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "chats.initialize", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });

        const [result$] = await this.matcher<operations.ChatsInitializeResponse>()
            .json(200, operations.ChatsInitializeResponse$inboundSchema)
            .json(400, operations.ChatsInitializeResponse$inboundSchema)
            .json(401, operations.ChatsInitializeResponse$inboundSchema)
            .json(402, operations.ChatsInitializeResponse$inboundSchema)
            .fail("5XX")
            .match(response);

        return result$;
    }

    /**
     * Delete a chat
     *
     * @remarks
     * Delete a chat by ID. All messages in the chat are also deleted.
     */
    async delete(
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsDeleteResponse> {
        const input$: operations.ChatsDeleteRequest = {
            chatId: chatId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ChatsDeleteRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v6/chat")();

        const query$ = encodeFormQuery$({
            chatId: payload$.chatId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "chats.delete", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });

        const [result$] = await this.matcher<operations.ChatsDeleteResponse>()
            .json(200, operations.ChatsDeleteResponse$inboundSchema)
            .json(400, operations.ChatsDeleteResponse$inboundSchema)
            .json(401, operations.ChatsDeleteResponse$inboundSchema)
            .fail("5XX")
            .match(response);

        return result$;
    }
}
