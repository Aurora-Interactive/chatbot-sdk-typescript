/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chatsDelete } from "../funcs/chatsDelete.js";
import { chatsInitialize } from "../funcs/chatsInitialize.js";
import { chatsList } from "../funcs/chatsList.js";
import { chatsPreview } from "../funcs/chatsPreview.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Chats extends ClientSDK {
    /**
     * Get all chats assigned to a user
     *
     * @remarks
     * Get chat IDs assigned to a user ID
     */
    async list(options?: RequestOptions): Promise<operations.ChatsListResponse> {
        return unwrapAsync(chatsList(this, options));
    }

    /**
     * Get the latest message from the given chat
     */
    async preview(
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsPreviewResponse> {
        return unwrapAsync(chatsPreview(this, chatId, options));
    }

    /**
     * Initialize chat with AI character
     *
     * @remarks
     * Initialize a chat with a given AI character, including storing the character's initial response as a message in our system.
     */
    async initialize(
        characterId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsInitializeResponse> {
        return unwrapAsync(chatsInitialize(this, characterId, options));
    }

    /**
     * Delete a chat
     *
     * @remarks
     * Delete a chat by ID. All messages in the chat are also deleted.
     */
    async delete(
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.ChatsDeleteResponse> {
        return unwrapAsync(chatsDelete(this, chatId, options));
    }
}
