/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { unwrap as unwrap$ } from "../types/fp.js";

export enum SendAcceptEnum {
    applicationJson = "application/json",
    textEventStream = "text/event-stream",
}

export class Messages extends ClientSDK {
    /**
     * Save chat message
     *
     * @remarks
     * Save chat message after AI response
     */
    async save(
        role: operations.Role,
        content: string,
        timestamp: number,
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.MessagesSaveResponse> {
        const input$: operations.MessagesSaveTimestampedMessageResponse | undefined = {
            role: role,
            content: content,
            timestamp: timestamp,
            chatId: chatId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.MessagesSaveTimestampedMessageResponse$outboundSchema.optional().parse(
                    value$
                ),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/message/save")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "messages.save", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.MessagesSaveResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.MessagesSaveResponse$inboundSchema),
            m$.json(400, operations.MessagesSaveResponse$inboundSchema),
            m$.json(401, operations.MessagesSaveResponse$inboundSchema),
            m$.json(402, operations.MessagesSaveResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Get full message history
     *
     * @remarks
     * Get user-facing chat transcript. Does not include special messages (enhanced context) or system messages.
     */
    async history(
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.MessagesHistoryResponse> {
        const input$: operations.MessagesHistoryRequest = {
            chatId: chatId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.MessagesHistoryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/api/v7/message/history")();

        const query$ = encodeFormQuery$({
            chatId: payload$.chatId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "messages.history", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.MessagesHistoryResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.MessagesHistoryResponse$inboundSchema),
            m$.json(400, operations.MessagesHistoryResponse$inboundSchema),
            m$.json(401, operations.MessagesHistoryResponse$inboundSchema),
            m$.json(402, operations.MessagesHistoryResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Send message
     *
     * @remarks
     * Send a message to a particular chat for a response
     */
    async send(
        characterId: number,
        chatId: number,
        message: string,
        options?: RequestOptions & { acceptHeaderOverride?: SendAcceptEnum }
    ): Promise<operations.MessagesSendResponse> {
        const input$: operations.MessagesSendRequestBody | undefined = {
            characterId: characterId,
            chatId: chatId,
            message: message,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.MessagesSendRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/message")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: options?.acceptHeaderOverride || "application/json;q=1, text/event-stream;q=0",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "messages.send", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.MessagesSendResponse,
            SDKError | SDKValidationError
        >(
            m$.sse(200, operations.MessagesSendResponse$inboundSchema),
            m$.json(400, operations.MessagesSendResponse$inboundSchema),
            m$.json(401, operations.MessagesSendResponse$inboundSchema),
            m$.json(402, operations.MessagesSendResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Delete message
     *
     * @remarks
     * Remove message from message history by ID
     */
    async delete(
        messageId: number,
        options?: RequestOptions
    ): Promise<operations.MessagesDeleteResponse> {
        const input$: operations.MessagesDeleteRequest = {
            messageId: messageId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.MessagesDeleteRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/api/v7/message")();

        const query$ = encodeFormQuery$({
            messageId: payload$.messageId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "messages.delete", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.MessagesDeleteResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.MessagesDeleteResponse$inboundSchema),
            m$.json(400, operations.MessagesDeleteResponse$inboundSchema),
            m$.json(401, operations.MessagesDeleteResponse$inboundSchema),
            m$.json(402, operations.MessagesDeleteResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }
}
