/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { EventStream } from "../lib/event-streams.js";
import { HTTPClient } from "../lib/http.js";
import * as retries$ from "../lib/retries.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Messages extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Save chat message
     *
     * @remarks
     * Save chat message either from the initial context prompt or after AI generation
     */
    async save(
        role: operations.Role,
        content: string,
        timestamp: number,
        chatId: number,
        options?: RequestOptions & { retries?: retries$.RetryConfig }
    ): Promise<components.SuccessfulRequest> {
        const input$: operations.SaveMessageTimestampedMessageResponse | undefined = {
            role: role,
            content: content,
            timestamp: timestamp,
            chatId: chatId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.SaveMessageTimestampedMessageResponse$outboundSchema.optional().parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v3/saveMessage")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "saveMessage", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.2,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, {
                    context,
                    errorCodes: ["400", "401", "402", "4XX", "5XX"],
                });
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.SuccessfulRequest>()
            .json(200, components.SuccessfulRequest$inboundSchema)
            .json(400, errors.BadRequestError$inboundSchema, { err: true })
            .json(401, errors.AuthenticationFailedError$inboundSchema, { err: true })
            .json(402, errors.AccountInBadStandingError$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get full message history
     *
     * @remarks
     * Get all of the messages sent in a given chat
     */
    async history(
        chatId: number,
        options?: RequestOptions & { retries?: retries$.RetryConfig }
    ): Promise<operations.GetMessageHistorySuccessfulRequest> {
        const input$: operations.GetMessageHistoryRequest = {
            chatId: chatId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetMessageHistoryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v3/getMessageHistory")();

        const query$ = encodeFormQuery$({
            chatId: payload$.chatId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = {
            operationID: "getMessageHistory",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.2,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, {
                    context,
                    errorCodes: ["400", "401", "402", "4XX", "5XX"],
                });
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetMessageHistorySuccessfulRequest>()
            .json(200, operations.GetMessageHistorySuccessfulRequest$inboundSchema)
            .json(400, errors.GetMessageHistoryResponseBody$inboundSchema, { err: true })
            .json(401, errors.GetMessageHistoryMessagesResponseBody$inboundSchema, { err: true })
            .json(402, errors.AccountInBadStandingError$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get chat context
     *
     * @remarks
     * Get all the messages from a given chat that are allocated to be used as AI model context. Almost always less messages than full chat history for performance reasons when running against our AI model.
     */
    async context(
        chatId: number,
        options?: RequestOptions & { retries?: retries$.RetryConfig }
    ): Promise<operations.GetMessageContextSuccessfulRequest> {
        const input$: operations.GetMessageContextRequest = {
            chatId: chatId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetMessageContextRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v3/getMessageContext")();

        const query$ = encodeFormQuery$({
            chatId: payload$.chatId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = {
            operationID: "getMessageContext",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.2,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, {
                    context,
                    errorCodes: ["400", "401", "402", "4XX", "5XX"],
                });
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetMessageContextSuccessfulRequest>()
            .json(200, operations.GetMessageContextSuccessfulRequest$inboundSchema)
            .json(400, errors.GetMessageContextResponseBody$inboundSchema, { err: true })
            .json(401, errors.GetMessageContextMessagesResponseBody$inboundSchema, { err: true })
            .json(402, errors.AccountInBadStandingError$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Send message
     *
     * @remarks
     * Send a chat message to a particular chat for a response
     */
    async send(
        chatId: number,
        message: string,
        messageContext?: Array<components.Message> | undefined,
        options?: RequestOptions & { retries?: retries$.RetryConfig }
    ): Promise<EventStream<components.ChatCompletionFragment>> {
        const input$: operations.SendMessageChatIDResponse | undefined = {
            chatId: chatId,
            message: message,
            messageContext: messageContext,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.SendMessageChatIDResponse$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v3/sendMessage")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "text/event-stream",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "sendMessage", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.2,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, {
                    context,
                    errorCodes: ["400", "401", "402", "4XX", "5XX"],
                });
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<EventStream<components.ChatCompletionFragment>>()
            .sse(
                200,
                z.instanceof(ReadableStream<Uint8Array>).transform((stream) => {
                    return new EventStream({
                        stream,
                        decoder(rawEvent) {
                            const schema = components.ChatCompletionFragment$inboundSchema;
                            return schema.parse(rawEvent);
                        },
                    });
                })
            )
            .json(400, errors.SendMessageResponseBody$inboundSchema, { err: true })
            .json(401, errors.SendMessageMessagesResponseBody$inboundSchema, { err: true })
            .json(402, errors.AccountInBadStandingError$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete message
     *
     * @remarks
     * Remove message from message history, given a message ID
     */
    async delete(
        messageId: number,
        options?: RequestOptions & { retries?: retries$.RetryConfig }
    ): Promise<components.SuccessfulRequest> {
        const input$: operations.DeleteMessageRequest = {
            messageId: messageId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteMessageRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v3/deleteMessage")();

        const query$ = encodeFormQuery$({
            messageId: payload$.messageId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = { operationID: "deleteMessage", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            { method: "DELETE", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.2,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, {
                    context,
                    errorCodes: ["400", "401", "402", "4XX", "5XX"],
                });
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.SuccessfulRequest>()
            .json(200, components.SuccessfulRequest$inboundSchema)
            .json(400, errors.DeleteMessageResponseBody$inboundSchema, { err: true })
            .json(401, errors.DeleteMessageMessagesResponseBody$inboundSchema, { err: true })
            .json(402, errors.AccountInBadStandingError$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
