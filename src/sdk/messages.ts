/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesDelete } from "../funcs/messagesDelete.js";
import { messagesGetMany } from "../funcs/messagesGetMany.js";
import { messagesSave } from "../funcs/messagesSave.js";
import { messagesSend, SendAcceptEnum } from "../funcs/messagesSend.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { SendAcceptEnum } from "../funcs/messagesSend.js";

export class Messages extends ClientSDK {
    /**
     * Save chat message
     *
     * @remarks
     * Save chat message after AI response
     */
    async save(
        role: operations.Role,
        content: string,
        timestamp: number,
        chatId: number,
        options?: RequestOptions
    ): Promise<operations.MessagesSaveResponse> {
        return unwrapAsync(messagesSave(this, role, content, timestamp, chatId, options));
    }

    /**
     * Get a certain number of messages from the message history, up to 100 per request.
     */
    async getMany(
        chatId: number,
        numMessages: number,
        from?: number | undefined,
        options?: RequestOptions
    ): Promise<operations.MessagesGetManyResponse> {
        return unwrapAsync(messagesGetMany(this, chatId, numMessages, from, options));
    }

    /**
     * Send message
     *
     * @remarks
     * Send a message to a particular chat for a response
     */
    async send(
        characterId: number,
        chatId: number,
        message: string,
        options?: RequestOptions & { acceptHeaderOverride?: SendAcceptEnum }
    ): Promise<operations.MessagesSendResponse> {
        return unwrapAsync(messagesSend(this, characterId, chatId, message, options));
    }

    /**
     * Delete message
     *
     * @remarks
     * Remove message from message history by ID
     */
    async delete(
        messageId: number,
        options?: RequestOptions
    ): Promise<operations.MessagesDeleteResponse> {
        return unwrapAsync(messagesDelete(this, messageId, options));
    }
}
