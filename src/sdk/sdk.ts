/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Characters } from "./characters.js";
import { Chats } from "./chats.js";
import { Messages } from "./messages.js";

export class AuroraChatbotSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _characters?: Characters;
    get characters(): Characters {
        return (this._characters ??= new Characters(this.options$));
    }

    private _chats?: Chats;
    get chats(): Chats {
        return (this._chats ??= new Chats(this.options$));
    }

    private _messages?: Messages;
    get messages(): Messages {
        return (this._messages ??= new Messages(this.options$));
    }
}
