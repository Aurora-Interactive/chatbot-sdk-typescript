/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersGetInfo } from "../funcs/usersGetInfo.js";
import { usersLogin } from "../funcs/usersLogin.js";
import { usersQuota } from "../funcs/usersQuota.js";
import { usersSetInfo } from "../funcs/usersSetInfo.js";
import { usersSignup } from "../funcs/usersSignup.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
    /**
     * Login
     *
     * @remarks
     * Login and retrieve an access token for use with the API
     */
    async login(
        request?: operations.UsersLoginRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.UsersLoginResponse> {
        return unwrapAsync(usersLogin(this, request, options));
    }

    /**
     * Get User Info
     *
     * @remarks
     * Get personal account metadata. Useful for pre-filling update fields for when the user wants to update account data
     */
    async getInfo(options?: RequestOptions): Promise<operations.UsersGetUserInfoResponse> {
        return unwrapAsync(usersGetInfo(this, options));
    }

    /**
     * Update account information
     *
     * @remarks
     * Update information such as your email and username
     */
    async setInfo(
        username: string,
        email: string,
        autoExecuteTts: boolean,
        password: string,
        options?: RequestOptions
    ): Promise<operations.UsersSetUserInfoResponse> {
        return unwrapAsync(usersSetInfo(this, username, email, autoExecuteTts, password, options));
    }

    /**
     * Quota and plan info
     *
     * @remarks
     * Get information related to the user's subscription quota and plan details.
     */
    async quota(options?: RequestOptions): Promise<operations.UsersQuotaSuccessfulRequest> {
        return unwrapAsync(usersQuota(this, options));
    }

    /**
     * User signup
     *
     * @remarks
     * Create an account
     */
    async signup(
        request?: operations.UsersSignupRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.UsersSignupResponse> {
        return unwrapAsync(usersSignup(this, request, options));
    }
}
