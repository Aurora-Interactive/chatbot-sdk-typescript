/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { unwrap as unwrap$ } from "../types/fp.js";

export class Users extends ClientSDK {
    /**
     * Login
     *
     * @remarks
     * Login and retrieve an access token for use with the API
     */
    async login(
        request?: operations.UsersLoginRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.UsersLoginResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.UsersLoginRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/login")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const context = { operationID: "users.login", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.UsersLoginResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.UsersLoginResponse$inboundSchema),
            m$.json(400, operations.UsersLoginResponse$inboundSchema),
            m$.json(401, operations.UsersLoginResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Get User Info
     *
     * @remarks
     * Get personal account metadata. Useful for pre-filling update fields for when the user wants to update account data
     */
    async getInfo(options?: RequestOptions): Promise<operations.UsersGetUserInfoResponse> {
        const input$: operations.UsersGetUserInfoRequest = {};
        void input$; // request input is unused

        const path$ = pathToFunc("/api/v7/user/info")();

        const headers$ = new Headers({
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = {
            operationID: "users.getUserInfo",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.UsersGetUserInfoResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.UsersGetUserInfoResponse$inboundSchema),
            m$.json(401, operations.UsersGetUserInfoResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * Update account information
     *
     * @remarks
     * Update information such as your email and username
     */
    async setInfo(
        username: string,
        email: string,
        options?: RequestOptions
    ): Promise<operations.UsersSetUserInfoResponse> {
        const input$: components.UserInfo | undefined = {
            username: username,
            email: email,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => components.UserInfo$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/user/info")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-access-token": encodeSimple$("x-access-token", this.options$.accessToken, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const context = {
            operationID: "users.setUserInfo",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "PUT",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.UsersSetUserInfoResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.UsersSetUserInfoResponse$inboundSchema),
            m$.json(400, operations.UsersSetUserInfoResponse$inboundSchema),
            m$.json(401, operations.UsersSetUserInfoResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }

    /**
     * User signup
     *
     * @remarks
     * Create an account
     */
    async signup(
        request?: operations.UsersSignupRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.UsersSignupResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.UsersSignupRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/api/v7/signup")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const context = { operationID: "users.signup", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 1000,
                        maxInterval: 60000,
                        exponent: 1.2,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.UsersSignupResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.UsersSignupResponse$inboundSchema),
            m$.json(400, operations.UsersSignupResponse$inboundSchema),
            m$.fail("5XX")
        )(response);

        return unwrap$(result$);
    }
}
